<?php
/**
 * @file
 * Alice module. Drupal in front of the mirror.
 */

/**
 * hook_menu
 */
function holmes_menu() {
  $items = array();
  $items['admin/structure/holmes'] = array(
    'title' => 'Hook detective',
    'page callback' => 'holmes_list',
    'access arguments' => array('access holmes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/holmes.page.inc'
  );
  $items['admin/structure/holmes/fields'] = array(
    'title' => 'Fields',
    'page callback' => 'holmes_fields',
    'access callback' => TRUE,
    //array('access holmes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/structure.page.inc'
  );
  $items['admin/structure/holmes/ents'] = array(
    'title' => 'Entities',
    'page callback' => 'holmes_ents',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/structure.page.inc'
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function holmes_permission() {
  return array(
    'access holmes' => array(
      'title' => t('Access Holmes'),
      'description' => t('For the hooks sherlocks'),
    ),
  );
}

/**
 * show the source code of a provided function
 *
 * @todo
 * - is there an easier way of doing this ?
 * - add syntax (later - can use a filter or a js )
 */
function holmes_func_source($fname) {
  // TODO: what if it aint found (function, file ...)
  $func = new ReflectionFunction($fname);
  // TODO: parse the DocComment ?
  //echo $func->getDocComment();
  $fle = file($func->getFileName());
  $out = '';
  for ($ln = $func->getStartLine(); $ln <=  $func->getEndLine() ; $ln ++ ) {
  $out .=$fle[$ln-1];
  }
  return $out;
//echo $func;
}

function holmes_json_cros($data) {
  // attention, this could be dangerous
  drupal_add_http_header('Access-Control-Allow-Origin','*');
  // TODO : add some token-based authentication

  switch($_SERVER['REQUEST_METHOD']) {
    case 'OPTIONS':
// all headers according to http://benbuckman.net/tech/12/04/cracking-cross-domainallow-origin-nut
      drupal_add_http_header('Access-Control-Allow-Methods',"'OPTIONS, GET'");
      drupal_add_http_header('Access-Control-Allow-Headers',"'Content-Type, X-Requested-With, X-PINGOTHER'");
      drupal_add_http_header('Access-Control-Max-Age', 86400);
      drupal_json_output(true);
    break;
    case 'GET':
      drupal_json_output($data);
    break;
  }
}

function holmes_analyze_menu_print($menu_name) {
  $data = holmes_analyze_menu($menu_name);
  dpm($data);
  $out = '';
  foreach ($data as $row) {
    $out .= str_repeat('_',$row['level']). $row['title'] . "\t"; //'`'. . '`'
    unset($row['level']);
    unset($row['title']);
    $out .= implode($row, "\t") . "\n" ;
  }
  return $out;
}

function holmes_analyze_menu($menu_name) {
  $tree = menu_tree_all_data($menu_name);
  $data = holmes_analyze_menu_tree($tree);
  return $data;
}

function holmes_analyze_menu_tree($tree, $level = 0) {
  $out = array();
  $level ++;
  foreach($tree as $title => $branch) {
    $out[$title] = holmes_analyze_menu_link($branch['link'], $level);

    $out += holmes_analyze_menu_tree($branch['below'], $level);
  }
  return $out;
}

function holmes_analyze_menu_link($link, $level) {
  $out = array();
  // check if it links a node, what type
  $out['level'] = $level;
  $out['title'] = $link['link_title'];

  switch($link['page_callback']){
    case 'prg_person_node_page_view':
      //$out['type'] = 'node';
      $out['type'] = holmes_get_nodetype($link['link_path']);
    break;
    case 'views_page':
      $out['type'] = 'view';
    break;
    default:
      $out['type'] = $link['page_callback'];
  }
 /*
  if(!isset($out['subtype'])) {
    $out['subtype'] = 'sub';
  }
*/
  //$out['type'] = 'node';  // view, ?
  //$out['subtype'] = 'page';  // view name, ?
  $out['module'] = $link['module'];
  //$out['page_callback'] = $link['page_callback'];
  $out['hidden'] = $link['hidden'];
  // page, tab or so
  $out['typen'] = $link['type'];

  return $out;
}

function holmes_get_nodetype($path) {
  $exp = explode('/', $path);
  $nid = end($exp);
  $n = node_load($nid);
  return $n->type;
}
